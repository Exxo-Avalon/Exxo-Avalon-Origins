--- src/Terraria/Terraria/Main.cs
+++ src/Avalon/Terraria/Main.cs
@@ -293,12 +_,12 @@
 		public static int dedServCount2;
 		public static bool superFast = false;
 		public const int offLimitBorderTiles = 40;
-		public const int maxItemTypes = 5045;
+		public const int maxItemTypes = ItemID.Count;
 		public const int maxProjectileTypes = 950;
 		public const int maxNPCTypes = 663;
 		public const int maxTileSets = 623;
 		public const int maxWallTypes = 316;
-		public const int maxBuffTypes = 323;
+		public const int maxBuffTypes = BuffID.Count;
 		public const int maxGlowMasks = 301;
 		public const int maxExtras = 212;
 		public const int maxGoreTypes = 1269;
@@ -518,15 +_,15 @@
 		public static float musicPitch = 0f;
 		public static bool[] projHostile = new bool[950];
 		public static bool[] projHook = new bool[950];
-		public static bool[] pvpBuff = new bool[323];
+		public static bool[] pvpBuff = new bool[maxBuffTypes];
-		public static bool[] persistentBuff = new bool[323];
+		public static bool[] persistentBuff = new bool[maxBuffTypes];
-		public static bool[] vanityPet = new bool[323];
+		public static bool[] vanityPet = new bool[maxBuffTypes];
-		public static bool[] lightPet = new bool[323];
+		public static bool[] lightPet = new bool[maxBuffTypes];
-		public static bool[] meleeBuff = new bool[323];
+		public static bool[] meleeBuff = new bool[maxBuffTypes];
-		public static bool[] debuff = new bool[323];
+		public static bool[] debuff = new bool[maxBuffTypes];
-		public static bool[] buffNoSave = new bool[323];
+		public static bool[] buffNoSave = new bool[maxBuffTypes];
-		public static bool[] buffNoTimeDisplay = new bool[323];
+		public static bool[] buffNoTimeDisplay = new bool[maxBuffTypes];
-		public static bool[] buffDoubleApply = new bool[323];
+		public static bool[] buffDoubleApply = new bool[maxBuffTypes];
 		public static int maxMP = 10;
 		public static string[] recentWorld = new string[maxMP];
 		public static string[] recentIP = new string[maxMP];
@@ -636,7 +_,7 @@
 		public static bool armorHide;
 		public static float craftingAlpha = 1f;
 		public static float armorAlpha = 1f;
-		public static float[] buffAlpha = new float[323];
+		public static float[] buffAlpha = new float[maxBuffTypes];
 		public static bool hardMode;
 		public float chestLootScale = 1f;
 		public bool chestLootHover;
@@ -981,7 +_,7 @@
 		public static Sign[] sign = new Sign[1000];
 		public static int[] itemFrame = new int[401];
 		public static int[] itemFrameCounter = new int[401];
-		public static DrawAnimation[] itemAnimations = new DrawAnimation[5045];
+		public static DrawAnimation[] itemAnimations = new DrawAnimation[Main.maxItemTypes];
 		private static DrawAnimation _coinOnWorldAnimation = new DrawAnimationVertical(6, 8);
 		private static DrawAnimation _monkStaffT3OnWorldAnimation = new DrawAnimationVertical(5, 3);
 		public static List<int> itemAnimationsRegistered = new List<int>();
@@ -2177,24 +_,14 @@
 			}
 		}
 
-		public static bool masterMode {
-			get {
-				if (ActiveWorldFileData == null)
-					return false;
-
-				if (_overrideForMasterMode.HasValue)
-					return _overrideForMasterMode.Value;
-
-				return _currentGameModeInfo.IsMasterMode;
-			}
-		}
+		public static bool masterMode => false;
 
 		public static bool expertMode {
 			get {
 				if (ActiveWorldFileData == null)
 					return false;
 
-				if (_overrideForExpertMode.HasValue)
+				if (_overrideForExpertMode.HasValue || _overrideForMasterMode.HasValue)
 					return _overrideForExpertMode.Value;
 
 				return _currentGameModeInfo.IsExpertMode;
@@ -4725,7 +_,7 @@
 #if CLIENT
 			Configuration.Load();
 			graphics = new GraphicsDeviceManager(this as Game);
-			base.Content.RootDirectory = "Content";
+			base.Content.RootDirectory = "Avalon Content";
 #endif
 		}
 
@@ -5020,7 +_,7 @@
 		}
 
 		private static void Initialize_Items() {
-			for (int i = 0; i < 5045; i++) {
+			for (int i = 0; i < Main.maxItemTypes; i++) {
 				Item item = new Item();
 				item.SetDefaults(i);
 				if (item.headSlot > 0)
@@ -8341,9 +_,9 @@
 
 		private void LoadMusic() {
 			if (SoundEngine.IsAudioSupported) {
-				engine = new AudioEngine("Content\\TerrariaMusic.xgs");
+				engine = new AudioEngine("Avalon Content\\TerrariaMusic.xgs");
-				soundBank = new SoundBank(engine, "Content\\Sound Bank.xsb");
+				soundBank = new SoundBank(engine, "Avalon Content\\Sound Bank.xsb");
-				waveBank = new WaveBank(engine, "Content\\Wave Bank.xwb");
+				waveBank = new WaveBank(engine, "Avalon Content\\Wave Bank.xwb");
 				for (int i = 1; i < 89; i++) {
 					music[i] = soundBank.GetCue("Music_" + i);
 				}
@@ -8351,9 +_,9 @@
 		}
 
 		private IEnumerator LoadMusic_InSteps() {
-			engine = new AudioEngine("Content\\TerrariaMusic.xgs");
+			engine = new AudioEngine("Avalon Content\\TerrariaMusic.xgs");
-			soundBank = new SoundBank(engine, "Content\\Sound Bank.xsb");
+			soundBank = new SoundBank(engine, "Avalon Content\\Sound Bank.xsb");
-			waveBank = new WaveBank(engine, "Content\\Wave Bank.xwb");
+			waveBank = new WaveBank(engine, "Avalon Content\\Wave Bank.xwb");
 			yield return null;
 			for (int i = 1; i < 89; i++) {
 				music[i] = soundBank.GetCue("Music_" + i);
@@ -14757,7 +_,7 @@
 
 			float num2 = (float)(int)mouseTextColor / 255f;
 			Microsoft.Xna.Framework.Color baseColor = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
-			if (num == -13)
+			if (num == -13 || num == -12 || HoverItem.expert)
 				baseColor = new Microsoft.Xna.Framework.Color((byte)(255f * num2), (byte)(masterColor * 200f * num2), 0, mouseTextColor);
 
 			if (num == -11)
@@ -14799,10 +_,10 @@
 			if (num == 10)
 				baseColor = new Microsoft.Xna.Framework.Color((byte)(255f * num2), (byte)(40f * num2), (byte)(100f * num2), mouseTextColor);
 
-			if (num >= 11)
+			if (num == 11)
 				baseColor = new Microsoft.Xna.Framework.Color((byte)(180f * num2), (byte)(40f * num2), (byte)(255f * num2), mouseTextColor);
 
-			if (HoverItem.expert || num == -12)
+			if (num >= 12)
 				baseColor = new Microsoft.Xna.Framework.Color((byte)((float)DiscoR * num2), (byte)((float)DiscoG * num2), (byte)((float)DiscoB * num2), mouseTextColor);
 
 			if (diff == 1)
@@ -15002,9 +_,6 @@
 					Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
 					black = new Microsoft.Xna.Framework.Color(num4, num4, num4, num4);
 					if (k == 0) {
-						if (rare == -13)
-							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(masterColor * 200f * num4), 0, a);
-
 						if (rare == -11)
 							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(175f * num4), (byte)(0f * num4), a);
 
@@ -15041,7 +_,7 @@
 						if (rare == 10)
 							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(40f * num4), (byte)(100f * num4), a);
 
-						if (rare >= 11)
+						if (rare == 11)
 							black = new Microsoft.Xna.Framework.Color((byte)(180f * num4), (byte)(40f * num4), (byte)(255f * num4), a);
 
 						if (diff == 1)
@@ -15050,8 +_,11 @@
 						if (diff == 2)
 							black = new Microsoft.Xna.Framework.Color((byte)((float)(int)hcColor.R * num4), (byte)((float)(int)hcColor.G * num4), (byte)((float)(int)hcColor.B * num4), a);
 
-						if (hoverItem.expert || rare == -12)
+						if (rare >= 12)
 							black = new Microsoft.Xna.Framework.Color((byte)((float)DiscoR * num4), (byte)((float)DiscoG * num4), (byte)((float)DiscoB * num4), a);
+
+						if (rare == -13 || hoverItem.expert || rare == -12)
+							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(masterColor * 200f * num4), 0, a);
 					}
 					else if (array2[k]) {
 						black = (array3[k] ? new Microsoft.Xna.Framework.Color((byte)(190f * num4), (byte)(120f * num4), (byte)(120f * num4), a) : new Microsoft.Xna.Framework.Color((byte)(120f * num4), (byte)(190f * num4), (byte)(120f * num4), a));
@@ -15233,10 +_,10 @@
 					numLines++;
 				}
 
-				if (!item.vanity && item.FitsAccessoryVanitySlot) {
+				/*if (!item.vanity && item.FitsAccessoryVanitySlot) {
 					toolTipLine[numLines] = Language.GetText("Misc.CanBePlacedInVanity").Value;
 					numLines++;
-				}
+				}*/
 
 				if (item.defense > 0) {
 					toolTipLine[numLines] = item.defense + Lang.tip[25].Value;
@@ -15583,7 +_,7 @@
 			}
 
 			if (item.rare == -13) {
-				toolTipLine[numLines] = Language.GetTextValue("GameUI.Master");
+				toolTipLine[numLines] = Language.GetTextValue("GameUI.Expert");
 				numLines++;
 			}
 
@@ -38852,10 +_,16 @@
 					if (num107 == 3)
 						num109 = 2;
 
-					Vector2 origin2 = FontAssets.MouseText.Value.MeasureString(versionNumber);
+					string avalonVersion = "Exxo Avalon: Origins v1.0.0.0";
+
+					Vector2 origin2 = FontAssets.MouseText.Value.MeasureString("Terraria " + versionNumber);
 					origin2.X *= 0.5f;
+					spriteBatch.DrawString(FontAssets.MouseText.Value, "Terraria " + versionNumber, new Vector2(origin2.X + (float)num108 + 10f, (float)screenHeight - origin2.Y + (float)num109 - 2f), color12, 0f, origin2, 1f, SpriteEffects.None, 0f);
+
+					Vector2 origin3 = FontAssets.MouseText.Value.MeasureString(avalonVersion);
+					origin3.X *= 0.5f;
-					origin2.Y *= 0.5f;
+					origin3.Y *= 0.5f;
-					spriteBatch.DrawString(FontAssets.MouseText.Value, versionNumber, new Vector2(origin2.X + (float)num108 + 10f, (float)screenHeight - origin2.Y + (float)num109 - 2f), color12, 0f, origin2, 1f, SpriteEffects.None, 0f);
+					spriteBatch.DrawString(FontAssets.MouseText.Value, avalonVersion, new Vector2(origin3.X + (float)num108 + 10f, (float)screenHeight - origin3.Y + (float)num109 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
 				}
 			}
 
